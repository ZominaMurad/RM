"""
This security layer adequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

Conditions:
# Filename has to be in current directory. Filename contains [a-z,0-9,_,-,.]. Filename cannot be '.','..','.filename'.
# Reference Monitor should not disable API calls.
# Normal operations should not be blocked or produce any output.
# Invalid operations should not produce any output to the user.
# A valid file must start with the character 'S' and end with the character 'E'

"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    def __init__(self, filename, create):
        # Check for allowed filenames.
        allowed_char = ['_', '.', '-']
        try:
            if type(create) != bool:
                raise RepyArgumentError
            if filename[0] == '.':
                raise RepyArgumentError
            for ch in filename:
                if ch not in allowed_char and not (97 <= ord(ch) <= 122) and not (ch.isdigit()):
                    raise RepyArgumentError
        except RepyArgumentError:
            exitall()
        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'
        file_exist = self.Afn in listfiles()
        # make the files and add 'SE' to the readat file...
        try:
            if not create and not file_exist:
                raise FileNotFoundError
            else:
                self.Afile = openfile(self.Afn, create)
                self.Bfile = openfile(self.Bfn, True)
                if file_exist:
                    self.Bfile.writeat(self.Afile.readat(None, 0), 0)
                else:
                    self.Afile.writeat('SE', 0)
        except FileNotFoundError:
            pass
        except FileInUseError:
            exitall()


    def writeat(self, data, offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self.lock = createlock()
        self.lock.acquire(True)
        file_length = len(self.Bfile.readat(None,0))
        try:
            if offset < 0 or type(data) != str:
                raise RepyArgumentError
            elif offset > file_length:
                raise SeekPastEndOfFileError
        except SeekPastEndOfFileError:
            pass
        except RepyArgumentError:
            pass
        except FileClosedError:
            pass
        else:
            self.Bfile.writeat(data, offset)
        finally:
            self.lock.release()


    def readat(self, bytes, offset):
        # Read from the A file using the sandbox's readat...
        file_length = len(self.Afile.readat(None, 0))
        try:
            if offset < 0:
                raise RepyArgumentError
	    elif bytes < 0 and bytes != None:
		raise RepyArgumentError
            elif offset > file_length:
                raise SeekPastEndOfFileError
            else:
                return self.Afile.readat(bytes, offset)
        except SeekPastEndOfFileError:
            return ''
        except RepyArgumentError:
            return ''
        except FileClosedError:
            return ''


    def close(self):
        b_data = self.Bfile.readat(None, 0)
        if self.Bfile.readat(None, 0).startswith("S") and self.Bfile.readat(None, 0).endswith("E"):
            self.Afile.close()
            self.Bfile.close()
            removefile(self.Afn)
            self.Afile = openfile(self.Afn, True)
            self.Afile.writeat(b_data, 0)
            self.Afile.close()
        else:
            self.Afile.close()
            self.Bfile.close()
        removefile(self.Bfn)


def ABopenfile(filename, create):
    return ABFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": ABFile,
                "name": "ABFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception,
                            "return": (int, type(None)), "target": ABFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception,
                           "return": str, "target": ABFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": ABFile.close}
                }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def,
                                   TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()
